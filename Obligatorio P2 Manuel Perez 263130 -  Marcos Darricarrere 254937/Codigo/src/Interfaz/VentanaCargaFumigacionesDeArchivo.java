//  Manuel Perez 263130 -  Marcos Darricarrere 254937

package Interfaz;

import Dominio.ArchivoGrabacion;
import Dominio.ArchivoLectura;
import Dominio.Empresa;
import Dominio.Fumigacion;
import Dominio.Piloto;
import Dominio.Producto;
import Dominio.Tecnico;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class VentanaCargaFumigacionesDeArchivo extends javax.swing.JFrame implements PropertyChangeListener {

    private Empresa modelo = new Empresa();
    private ArrayList<Piloto> listaPilotos = new ArrayList<Piloto>();
    private ArrayList<Tecnico> listaTecnicos = new ArrayList<Tecnico>();
    private ArrayList<Producto> listaProductos = new ArrayList<Producto>();

    //Creamos una variable para cada dato.
    private Piloto piloto;
    private Producto producto;
    private Tecnico tecnico;
    private int dia;
    private String zona;
    private File fichero;

    //Creo un boolean para cada dato.
    private boolean pilotoCorrecto = false;
    private boolean tecnicoCorrecto = false;
    private boolean productoCorrecto = false;
    private boolean diaCorrecto = false;
    private boolean validarDatos = false;
    private boolean zonaFumigaciionCorrecta = false;

    //Creo las variables para en boton Enviar
    private int primeraLinea = 0;
    private boolean nombreValido = false;
    private boolean cedulaTecnicoValida = false;
    private boolean cedulaPilotoValida = false;
    private boolean primeraLineaValida = true;
    private ArrayList<String> fumigacionesIncorrectas = new ArrayList<String>();

    /**
     * Creates new form VentanaCargaFumigacionesDeArchivo
     */
    public VentanaCargaFumigacionesDeArchivo() {
        initComponents();
        for (int i = 1; i <= 31; i++) {
            comboDia.addItem(Integer.toString(i));
        }
    }

    VentanaCargaFumigacionesDeArchivo(Empresa empresa) {
        initComponents();
        for (int i = 1; i <= 31; i++) {
            comboDia.addItem(Integer.toString(i));
        }
        this.modelo = empresa;
        modelo.addPropertyChangeListener((PropertyChangeListener) this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        comboDia = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        botonBuscar = new javax.swing.JButton();
        textField = new javax.swing.JTextField();
        botonEnviar = new javax.swing.JButton();
        textArea = new javax.swing.JTextField();
        botonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Carga Fumigaciones de Archivo:");

        jLabel6.setText("Elija el dia:");

        comboDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDiaActionPerformed(evt);
            }
        });

        jLabel2.setText("Elija el archivo:");

        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        botonEnviar.setText("Enviar");
        botonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEnviarActionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonBuscar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboDia, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(textArea, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(botonBuscar)
                            .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(118, 118, 118))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textArea, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(comboDia, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonEnviar)
                    .addComponent(botonCancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDiaActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        //Creamos el objeto JFileChooser
        JFileChooser fileChooser = new JFileChooser();

        //Creamos el filtro
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.TXT", "txt");

        //Le indicamos el filtro
        fileChooser.setFileFilter(filtro);

        //Abrimos la ventana, guardamos la opcion seleccionada por el usuario
        int seleccion = fileChooser.showOpenDialog(this);

        //Si el usuario clickea en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            //Seleccionamos el fichero
            this.fichero = fileChooser.getSelectedFile();

            //Escribe la ruta del fichero seleccionado en el campo de texto
            this.textField.setText(fichero.getAbsolutePath());

            try ( FileReader fileReader = new FileReader(fichero)) {
                String cadena = "";
                int valor = fileReader.read();
                while (valor != -1) {
                    cadena = cadena + (char) valor;
                    valor = fileReader.read();
                }
                this.textArea.setText(cadena);
            } catch (IOException e1) {
                e1.printStackTrace();
            }

        }

    }//GEN-LAST:event_botonBuscarActionPerformed

    private void botonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEnviarActionPerformed
        // TODO add your handling code here:

        ArchivoLectura archivoLectura = new ArchivoLectura(fichero.getAbsolutePath());

        while (archivoLectura.hayMasLineas() && primeraLineaValida) {

            //Este codigo se aplica solo para la primera linea.
            while (primeraLinea == 0) {

                String[] primeraLineaArray = archivoLectura.linea().split("#");

                for (Piloto piloto : modelo.listaPilotos) {
                    if (primeraLineaArray[0].equals(Integer.toString(piloto.getCedula()))) {
                        this.piloto = piloto;
                        cedulaPilotoValida = true;
                    }
                }

                for (Tecnico tecnico : modelo.listaTecnicos) {
                    if (primeraLineaArray[1].equals(Integer.toString(tecnico.getCedula()))) {
                        this.tecnico = tecnico;
                        cedulaTecnicoValida = true;
                    }
                }

                for (Producto producto : modelo.listaProductos) {
                    if (primeraLineaArray[2].equals(producto.getNombre())) {
                        this.producto = producto;
                        nombreValido = true;
                    }
                }

                if (nombreValido && cedulaTecnicoValida && cedulaPilotoValida) {
                    JOptionPane.showMessageDialog(null, "Datos Correctos!",
                            "Datos Correctos!", JOptionPane.PLAIN_MESSAGE);
                } else {
                    primeraLineaValida = false;
                    JOptionPane.showMessageDialog(null, "Los datos ingresados en la primera linea son incorrectos!",
                            "Los datos ingresados en la primera linea son incorrectos!", JOptionPane.WARNING_MESSAGE);
                }
                primeraLinea++;
                
            }

            //Codigo para las demas lineas
            if (primeraLineaValida) {
                
                //Validar dia
                dia = Integer.parseInt(comboDia.getSelectedItem().toString());
                if (dia != 0) {
                    diaCorrecto = true;
                }
                zona = archivoLectura.linea();
                validarFumigacion();
                if (!zonaFumigaciionCorrecta && primeraLinea!=1) {
                    fumigacionesIncorrectas.add(zona);
                }

                zonaFumigaciionCorrecta = false;
                primeraLinea++;
            }
            
        }
        for (Fumigacion fumigaciones : modelo.listaFumigacion) {
            System.out.println(fumigaciones);
        }

        ArchivoGrabacion archivoGrabacion = new ArchivoGrabacion("Errores.txt");
        // Grabo las Fumigaciones incorrectas
        for(String fumigaciones : fumigacionesIncorrectas){
            archivoGrabacion.grabarLinea(fumigaciones);
        }
        archivoGrabacion.cerrar();
        archivoLectura.cerrar();
    }//GEN-LAST:event_botonEnviarActionPerformed

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_botonCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaCargaFumigacionesDeArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaCargaFumigacionesDeArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaCargaFumigacionesDeArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaCargaFumigacionesDeArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaCargaFumigacionesDeArchivo().setVisible(true);
            }
        });
    }

    @Override
    public void propertyChange(PropertyChangeEvent event) {

    }

    public void validarFumigacion() {
        //Validar la zona de fumigacion
        String[] letras = new String[]{"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "I", "M", "N", "O"};
        boolean areasUnoCorrecta = false;
        boolean areasDosCorrecta = false;
        boolean numerosCorrectos = false;

        String letraUno;
        String letraDos;
        String[] textoDividido = zona.split("-");
        if (textoDividido.length == 4) {
            for (int i = 0; i < textoDividido.length; i++) {
                letraUno = textoDividido[0];
                letraDos = textoDividido[2];
                for (int j = 0; j < letras.length; j++) {
                    if (letras[j].equals(letraUno)) {
                        areasUnoCorrecta = true;
                    }
                    if (letras[j].equals(letraDos)) {
                        areasDosCorrecta = true;
                    }
                }
            }

            if (Integer.parseInt(textoDividido[1]) <= 50 && Integer.parseInt(textoDividido[1]) > 0 && Integer.parseInt(textoDividido[3]) <= 50 && Integer.parseInt(textoDividido[3]) > 0) {
                numerosCorrectos = true;
            }

            if (areasUnoCorrecta && areasDosCorrecta && numerosCorrectos) {
                zonaFumigaciionCorrecta = true;
            }

        }

        //Si todos los booleans dan true entonces agrego la fumigacion a la lista.
        if (diaCorrecto && zonaFumigaciionCorrecta) {
            Fumigacion nuevaFumigacion = new Fumigacion(this.piloto, this.tecnico, this.producto, this.dia, this.zona);
            modelo.getListaFumigacion().add(nuevaFumigacion);
            // Agregamos la nueva fumigacion a la matriz de fumigaciones
            modelo.actualizarMatriz(this.zona,false);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonEnviar;
    private javax.swing.JComboBox<String> comboDia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField textArea;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables
}
